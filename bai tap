VIEWS
def detail (request): 
    if request.user.is_authenticated: # Kiểm tra xem người dùng đã đăng nhập hay chưa
        customer = request.user # Nếu người dùng đã đăng nhập, lấy đối tượng người dùng từ request       
        order, created= Order.objects.get_or_create(customer= customer,complete=False) # Tìm kiếm hoặc tạo một đơn hàng (Order) chưa hoàn thành cho khách hàng này
        items= order.order_nhanvien_set.all()  # Lấy tất cả các mục (items) trong đơn hàng liên quan đến nhân viên
        user_not_login ="hidden" # Thiết lập biến cho trường hợp người dùng chưa đăng nhập
        user_login ="show" # Thiết lập biến cho trường hợp người dùng đã đăng nhập
    else: # Nếu người dùng chưa đăng nhập, gán giá trị mặc định cho các biến
        items=[] # Danh sách các mục trong giỏ hàng sẽ là rỗng    
        order={'get_cart_items':0,'get_cart_total':0} # Đơn hàng mặc định, không có sản phẩm, tổng giá trị là 0
        user_not_login ="show" # Giao diện hiển thị thông báo người dùng chưa đăng nhập
        user_login ="hidden" # Giao diện ẩn phần dành cho người dùng đã đăng nhập
    id =request.GET.get('id','') # Lấy tham số 'id' từ URL, nếu không có thì mặc định là chuỗi rỗng
    nhanviens =Nhanvien.objects.filter(id=id) # Lọc danh sách nhân viên (Nhanvien) theo 'id' đã lấy từ URL
    context= {'items':items,'order':order,'user_not_login':user_not_login, 'user_login':user_login, 'nhanviens': nhanviens} # Chuẩn bị dữ liệu (context) sẽ truyền vào template
    return render(request, 'app/detail.html', context) # Trả về trang detail.html với dữ liệu context đã chuẩn bị
def category(request):
    categories = Category.objects.filter(is_sub=False) # Lấy danh sách các danh mục (Category) không phải là danh mục con (is_sub=False)
    active_category = request.GET.get('category', '')  # Lấy giá trị tham số 'category' từ URL, nếu không có thì mặc định là chuỗi rỗng
    nhanvien = [] # Khởi tạo danh sách nhân viên rỗng 
    if active_category: # Nếu có giá trị 'active_category', tìm nhân viên thuộc danh mục đó
        nhanvien = Nhanvien.objects.filter(category__slug=active_category)
    context = {'categories': categories,'nhanvien': nhanvien,'active_category': active_category,}  # Chuẩn bị dữ liệu (context) để truyền vào template
    return render(request, 'app/category.html', context) # Trả về trang category.html với dữ liệu context

def search(request):
    if request.method =="POST": # Kiểm tra xem yêu cầu là POST hay không
        searched = request.POST["searched"] # Nếu là yêu cầu POST, lấy giá trị từ ô tìm kiếm
        keys = Nhanvien.objects.filter(name__contains = searched)  # Tìm kiếm nhân viên theo tên có chứa từ khóa đã nhập
    if request.user.is_authenticated: # Kiểm tra xem người dùng đã đăng nhập hay chưa
        customer = request.user  # Nếu người dùng đã đăng nhập, lấy đối tượng người dùng
        order, created= Order.objects.get_or_create(customer= customer,complete=False)  # Tìm kiếm hoặc tạo đơn hàng chưa hoàn thành cho khách hàng này
        items= order.order_nhanvien_set.all() # Lấy tất cả các nhân viên trong đơn hàng của khách hàng
        cartItems= order.get_cart_items # Lấy số lượng các mục trong giỏ hàng
    else:
        items=[]  # Nếu người dùng chưa đăng nhập, khởi tạo giỏ hàng rỗng   
        order={'get_cart_items':0,'get_cart_total':0}  # Đơn hàng rỗng, không có sản phẩm
        cartItems= order['get_cart_items']  # Số lượng mục trong giỏ hàng là 0
    nhanviens = Nhanvien.objects.all() # Lấy tất cả các nhân viên từ cơ sở dữ liệu
    return render(request,'app/search.html',{"searched":searched,"keys":keys,'nhanviens': nhanviens}) # Trả về trang search.html với các giá trị context
def register(request):
    form = CreateUserForm  # Khởi tạo form đăng ký người dùng
    if request.method =="POST": # Kiểm tra xem yêu cầu có phải là POST không (khi người dùng gửi form)
        form = CreateUserForm(request.POST)  # Nếu yêu cầu là POST, tạo một form mới với dữ liệu gửi lên từ người dùng
        if form.is_valid(): # Kiểm tra tính hợp lệ của form
            form.save()  # Nếu form hợp lệ, lưu thông tin người dùng mới vào cơ sở dữ liệu
            return redirect('login') # Chuyển hướng người dùng đến trang đăng nhập sau khi đăng ký thành công
    contex = {'form':form} # Truyền form vào context để gửi tới template
    return render(request,'app/register.html',contex) # Trả về trang register.html với dữ liệu form để hiển thị trên giao diện người dùng
def loginPage(request):
    if request.user.is_authenticated: # Kiểm tra xem người dùng đã đăng nhập chưa
        return redirect('home') # Nếu người dùng đã đăng nhập, chuyển hướng đến trang chủ (home)
    if request.method =="POST": # Kiểm tra xem yêu cầu có phải là POST (khi người dùng gửi form đăng nhập)
        username = request.POST.get('username')  # Lấy thông tin tên người dùng và mật khẩu từ dữ liệu gửi lên
        password = request.POST.get('password')
        user = authenticate(request,username =username,password=password)  # Kiểm tra thông tin đăng nhập
        if user is not None: # Nếu thông tin hợp lệ (người dùng tồn tại)
            login(request,user)  # Đăng nhập người dùng
            return redirect('home')  # Chuyển hướng đến trang chủ sau khi đăng nhập thành công
        else: 
            messages.info(request,'Tên đăng nhập hoặc tài khoản sai!') #dùng để tạo thông báo với mức độ "thông tin" cho người dùng
    contex = {} #Tạo một từ điển rỗng
    return render(request,'app/login.html',contex) 
def logoutPage(request):
    logout(request) #dùng để đăng xuất người dùng
    return redirect('login') #chuyển hướng người dùng đến trang đăng nhập
def home(request):
    if request.user.is_authenticated: #kiểm tra xem người dùng có đăng nhập hay không
        customer = request.user #Lấy đối tượng người dùng từ request.user 
        order, created= Order.objects.get_or_create(customer= customer,complete=False) #kiểm tra xem người dùng có một đơn hàng chưa hoàn thành
        items= order.order_nhanvien_set.all() #lấy tất cả các nhân viên liên quan đến đơn hàng này
        cartItems= order.get_cart_items #Lấy tổng số mục trong giỏ hàng
        user_not_login ="hidden" #ẩn các phần tử dành cho người dùng chưa đăng nhập.
        user_login ="show" #hiển thị các phần tử dành cho người dùng đã đăng nhập
    else:
        items=[] # là một danh sách rỗng.   
        order={'get_cart_items':0,'get_cart_total':0} 
        cartItems= order['get_cart_items'] #để hiển thị số lượng mục trong giỏ hàng.
        user_not_login ="show" #dành cho người chưa đăng nhập sẽ được hiển thị.
        user_login ="hidden" #dành cho người đã đăng nhập sẽ bị ẩn đi.
    categories = Category.objects.filter(is_sub =False) #lọc ra các danh mục không phải là danh mục con, chỉ lấy các danh mục chính
    nhanviens = Nhanvien.objects.all() #lấy tất cả các đối tượng Nhanvien từ cơ sở dữ liệu 
    context= {'nhanviens': nhanviens ,'user_not_login':user_not_login, 'user_login':user_login,'categories':categories} #Tạo một từ điển để truyền dữ liệu vào template
    return render(request, 'app/home.html', context) 
def cart(request):
    if request.user.is_authenticated: #kiểm tra xem người dùng hiện tại có đang đăng nhập hay không
        customer = request.user #Gán người dùng hiện tại (đã đăng nhập) vào biến 
        order, created= Order.objects.get_or_create(customer= customer,complete=False) #Tìm hoặc tạo một đơn hàng cho người dùng hiện tại
        items= order.order_nhanvien_set.all() #Lấy tất cả các sản phẩm (Order_nhanvien) liên kết với đơn hàng hiện tại và gán vào biến items.
        user_not_login ="hidden" #Ẩn các phần tử chỉ dành cho người dùng đã đăng nhập.
        user_login ="show" #Hiển thị các phần tử chỉ dành cho người dùng đã đăng nhập.
    else:
        items=[] # là một danh sách rỗng   
        order={'get_cart_items':0,'get_cart_total':0} #lưu trữ thông tin về đơn hàng
        user_not_login ="show" #hiển thị các phần tử giao diện dành cho người dùng chưa đăng nhập.
        user_login ="hidden" #ẩn các phần tử giao diện dành cho người dùng đã đăng nhập
    context= {'items':items,'order':order,'user_not_login':user_not_login, 'user_login':user_login} #để truyền dữ liệu vào template
    return render(request, 'app/cart.html', context) #hiển thị giao diện giỏ hàng phù hợp cho người dùng chưa đăng nhập.
def checkout(request):
    if request.user.is_authenticated: #kiểm tra xem người dùng có đăng nhập hay chưa
        customer = request.user #Gán thông tin của người dùng hiện tại vào biến
        order, created= Order.objects.get_or_create(customer= customer,complete=False) #Tìm hoặc tạo một đơn hàng
        items= order.order_nhanvien_set.all() #Lấy danh sách các sản phẩm trong đơn hàng:
        user_not_login ="hidden" #Ẩn các phần tử dành cho người dùng chưa đăng nhập.
        user_login ="show" #Hiển thị các phần tử dành cho người dùng đã đăng nhập
    else:
        items=[]    
        order={'get_cart_items':0,'get_cart_total':0} #giá trị mặc định cho người dùng chưa đăng nhập (chưa có giỏ hàng).
        user_not_login ="show" #hiển thị dành cho người dùng chưa đăng nhập.
        user_login ="hidden" #hiển thị dành cho người dùng đã đăng nhập.
    context= {'items':items,'order':order, 'user_not_login':user_not_login, 'user_login':user_login} #Là một dictionary chứa các dữ liệu cần truyền
    return render(request, 'app/checkout.html', context) #sẽ hiển thị thông tin phù hợp dựa trên trạng thái đăng nhập của người dùng.
from django.http import JsonResponse
import json

def updateItem(request):
    data = json.loads(request.body)
    nhanvienId = data['nhanvienId'] #Lấy ID của nhân viên từ dữ liệu JSON.
    action = data['action'] #Lấy hành động cụ thể được gửi từ client 

    customer = request.user #Lấy thông tin người dùng hiện tại
    nhanvien = Nhanvien.objects.get(id=nhanvienId) #Truy vấn thông tin nhân viên từ database dựa trên ID nhận được

    order, created = Order.objects.get_or_create(customer=customer, complete=False) #Tìm hoặc tạo một đơn hàng chưa hoàn thành cho người dùng hiện tại
    orderNhanvien, created = Order_nhanvien.objects.get_or_create(order=order, nhanvien=nhanvien) #Tìm hoặc tạo một mục trong đơn hàng cho nhân viên tương ứng

    # Cập nhật diện tích
    if action == 'add': #Nếu hành động là 'add', tăng giá trị dientich (diện tích) lên 1.
        orderNhanvien.dientich += 1
    elif action == 'remove': #Nếu hành động là 'remove', giảm giá trị dientich xuống 1.
        orderNhanvien.dientich -= 1

    # Lưu lại sau khi cập nhật
    orderNhanvien.save() #Lưu các thay đổi đã cập nhật vào database.

    # Nếu diện tích <= 0, xóa bản ghi
    if orderNhanvien.dientich <= 0: #Kiểm tra nếu (diện tích) nhỏ hơn hoặc bằng 0.
        orderNhanvien.delete() #Xóa mục orderNhanvien khỏi database nếu không còn giá trị hợp lệ.

    return JsonResponse('Item updated successfully', safe=False) #Gửi phản hồi JSON về client


MODELS
class Category(models.Model): #Lớp này đại diện cho một bảng trong cơ sở dữ liệu để lưu trữ thông tin về các danh mục sản phẩm.
    sup_category = models.ForeignKey('self',on_delete=models.CASCADE,related_name='sub_categories',null=True,blank=True) .
    is_sub = models.BooleanField(default=False) #để xác định liệu một danh mục có phải là một danh mục con hay không.
    name = models.CharField(max_length=200,null=True) #Trường này lưu trữ tên của danh mục, với độ dài tối đa là 200 ký tự.
    slug = models.SlugField(max_length=200,unique=True) #Trường này lưu trữ một slug để xây dựng URL cho danh mục đó
    def __str__(self): #xác định cách hiển thị một đối tượng khi được in ra
        return self.name
class CreateUserForm(UserCreationForm):#CreateUserForm là một lớp kế thừa từ UserCreationForm
    class Meta: #Một lớp nội bộ để định cấu hình meta-data cho form.
        model = User #Xác định mô hình Django là mô hình User
        fields = ['username','email','first_name','last_name','password1','password2'] #là danh sách các trường mà form sẽ yêu cầu người dùng điền
class Nhanvien(models.Model): #lớp Nhanvien kế thừa từ models.Model
     category = models.ManyToManyField(Category, related_name='nhanvien') # Tạo mối quan hệ nhiều-nhiều giữa Nhanvien và Category
     name = models.CharField(max_length=200,null=True) #ưu trữ tên của nhân viên (hoặc sản phẩm/dịch vụ).
     price = models.CharField(max_length=200, null=False, default="0") #Lưu trữ giá trị (có thể là giá lương, giá dịch vụ, giá sản phẩm).
     image = models.ImageField(null=True,blank=True) #Lưu trữ hình ảnh của nhân viên (hoặc sản phẩm/dịch vụ).
     detail = models.TextField(null=True,blank=True) #Lưu trữ mô tả chi tiết về nhân viên (hoặc sản phẩm/dịch vụ).

     @property
     def imageurl(self):
        try:
            return self.image.url
        except ValueError:
            return ''
     def __str__(self):
        return self.name   
     
        
class Order(models.Model):
     customer = models.ForeignKey(User,on_delete=models.SET_NULL,null=True,blank=True) #Lưu trữ thông tin về khách hàng liên quan đến đơn hàng.
     date_order = models.DateTimeField(auto_now_add=True) #Lưu trữ thời gian đặt hàng của khách hàng
     complete = models.BooleanField(default=False,null=True,blank=False) #Lưu trữ trạng thái hoàn tất của đơn hàng
     transaction_id = models.CharField(max_length=200,null=True) #Lưu trữ mã giao dịch (transaction ID) của đơn hàng.


     def __str__(self):
          return str(self.id)
     @property
     def get_cart_items(self):  Tính toán và trả về tổng diện tích (hoặc một giá trị tổng hợp khác) của các mục trong giỏ hàng của khách hàng.
        order_nhanviens = self.order_nhanvien_set.all()  # Đảm bảo là `order_nhanvien_set` chứ không phải `ordernhanvien_set`
        total_area = sum([item.dientich for item in order_nhanviens])  # Tổng diện tích
        return total_area

     @property
     def get_cart_total(self):
        order_nhanviens = self.order_nhanvien_set.all() #Lấy tất cả các mục liên quan đến đơn hàng của người dùng 
# Đảm bảo là `order_nhanvien_set` chứ không phải `ordernhanvien_set`
        total_value = sum([item.get_total for item in order_nhanviens])  # Tổng giá trị #Tính toán tổng giá trị (có thể là tổng tiền hoặc tổng chi phí) của tất cả các mục trong giỏ hàng.
        return total_value # Trả về tổng giá trị của giỏ hàng (hoặc tổng chi phí) sau khi tính toán.

class Order_nhanvien(models.Model):
     nhanvien = models.ForeignKey(Nhanvien,on_delete=models.SET_NULL,null=True,blank=True) #lưu trữ mối quan hệ giữa đối tượng Order_nhanvien và đối tượng Nhanvien
     order = models.ForeignKey(Order,on_delete=models.SET_NULL,null=True,blank=True) #Trường này lưu trữ mối quan hệ giữa đối tượng Order_nhanvien và đơn hàng (Order)
     dientich=models.IntegerField(default=0, null=True, blank=True) #Trường này lưu trữ diện tích (hoặc số lượng) của mục trong đơn hàng.
     date_added = models.DateTimeField(auto_now_add=True) #Lưu trữ ngày giờ mà mục này được thêm vào đơn hàng.
     @property
     def get_total(self):#tính toán tổng giá trị của mục trong đơn hàng, dựa trên giá của Nhanvien và diện tích (hoặc số lượng) mà người dùng đã chọn.
          total = float(self.nhanvien.price) * float(self.dientich)
          return total

class Address(models.Model):
     customer = models.ForeignKey(User,on_delete=models.SET_NULL,null=True,blank=True) # Trường này lưu trữ thông tin người dùng (khách hàng) mà địa chỉ này thuộc về.
     order = models.ForeignKey(Order,on_delete=models.SET_NULL,null=True,blank=True) #lưu trữ thông tin về đơn hàng mà địa chỉ này liên quan đến
     address = models.CharField(max_length=200,null=True) #Lưu trữ thông tin địa chỉ cụ thể (số nhà, tên đường, v.v.).
     city = models.CharField(max_length=200,null=True) #Lưu trữ tên thành phố hoặc khu vực mà địa chỉ thuộc về.
     state = models.CharField(max_length=200,null=True) #Lưu trữ tên tỉnh hoặc quốc gia mà địa chỉ thuộc về.
     sdt = models.CharField(max_length=11,null=True) #Lưu trữ số điện thoại liên hệ của người nhận tại địa chỉ này
     date_added = models.DateTimeField(auto_now_add=True) # Lưu trữ thời gian khi địa chỉ này được thêm vào hệ thống.
      
     def __str__(self):
          return self.address    

URLS
urlpatterns = [
    path('', views.home, name="home"),#Định nghĩa URL mặc định cho trang chủ của ứng dụng.
    path('register', views.register, name="register"), #Định nghĩa URL cho trang đăng ký tài khoản người dùng.
    path('login/', views.loginPage, name="login"), #Định nghĩa URL cho trang đăng nhập
    path('category/', views.category, name="category"), #Định nghĩa URL cho trang danh mục sản phẩm (hoặc dịch vụ).
    path('detail/', views.detail, name="detail"), #Định nghĩa URL cho trang chi tiết sản phẩm hoặc dịch vụ.
    path('search/', views.search, name="search"), #Định nghĩa URL cho trang tìm kiếm.
    path('logout/', views.logoutPage, name="logout"), #Định nghĩa URL để đăng xuất người dùng
    path('cart/', views.cart, name="cart"), #Định nghĩa URL cho trang giỏ hàng của người dùng.
    path('checkout/', views.checkout, name="checkout"), #Định nghĩa URL cho trang thanh toán của đơn hàng.
    path('update_item/', views.updateItem, name="update_item"),#Định nghĩa URL cho việc cập nhật mục trong giỏ hàng (thêm, xóa hoặc thay đổi số lượng sản phẩm).
]



